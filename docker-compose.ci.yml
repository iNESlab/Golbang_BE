# CI: image push 용도 celery, celery-beat는
# 로컬 테스트시 용량이 커 보통 끄고 테스트하기 때문에 따로 만들었습니다.
services:     # 컨테이너 지정

  web:
    container_name: web
    image: "${DOCKER_USERNAME}/web:${VERSION}"
    build:
      context: .  # . 은 디폴트 -> 프로젝트 내의 "Dockerfile"이라는 이름을 알아서 찾아 빌드해줌
      dockerfile: Dockerfile.prod  # 배포용 Dockerfile 지정
    environment:
      DJANGO_SETTINGS_MODULE: golbang.settings
      REDIS_URL: redis://redis:6379/0  # Redis URL 환경 변수 설정
      REDIS_HOST: redis
    restart: always
    ports:
      - "8000:8000"
    env_file: #
      - .env
      # - ./golbang_firebase_sdk.json # Firebase Admin SDK 키 파일

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports: # 포트포워딩 - 로컬의 호스트가 6379 포트를 사용 중일 수 있으므로 6379 포트를 도커 컨테이너의 6379 포트로 포워딩해줌
      - "6379:6379"

  celery:   # celery 작업자
    container_name: celery
    image: "${DOCKER_USERNAME}/celery:${VERSION}"
    build: .
    command: celery -A golbang worker -l info
    environment:
      DJANGO_SETTINGS_MODULE: golbang.settings
      REDIS_URL: redis://redis:6380/0
      REDIS_HOST: redis
    env_file:
      - .env

  celery-beat:   # 주기적으로 업데이트
    container_name: celery-beat
    image: "${DOCKER_USERNAME}/celery-beat:${VERSION}"
    build: .
    command: celery -A golbang beat -l info
    environment:
      DJANGO_SETTINGS_MODULE: golbang.settings
      REDIS_URL: redis://redis:6380/0
      REDIS_HOST: redis
    env_file:
      - .env