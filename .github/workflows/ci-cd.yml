# .github/workflows/CICD.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      db:
        image: mariadb:latest
        env:
          MYSQL_HOST: ${{ secrets.RDS_MYSQL_DB_HOST }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.RDS_MYSQL_DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.RDS_MYSQL_DB_NAME }}
          MYSQL_USER: ${{ secrets.RDS_MYSQL_DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.RDS_MYSQL_DB_PASSWORD }}
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create .env.prod file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env.prod
        echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env.prod
        echo "MYSQL_DB_HOST=${{ secrets.MYSQL_DB_HOST }}" >> .env.prod
        echo "MYSQL_DB_PORT=${{ secrets.MYSQL_DB_PORT }}" >> .env.prod
        echo "MYSQL_DB_USER=${{ secrets.MYSQL_DB_USER }}" >> .env.prod
        echo "MYSQL_DB_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD }}" >> .env.prod
        echo "RDS_MYSQL_DB_NAME=${{ secrets.RDS_MYSQL_DB_NAME }}" >> .env.prod
        echo "RDS_MYSQL_DB_HOST=${{ secrets.RDS_MYSQL_DB_HOST }}" >> .env.prod
        echo "RDS_MYSQL_DB_PORT=${{ secrets.RDS_MYSQL_DB_PORT }}" >> .env.prod
        echo "RDS_MYSQL_DB_USER=${{ secrets.RDS_MYSQL_DB_USER }}" >> .env.prod
        echo "RDS_MYSQL_DB_PASSWORD=${{ secrets.RDS_MYSQL_DB_PASSWORD }}" >> .env.prod
        echo "MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}" >> .env.prod
        echo "SOCIAL_AUTH_GOOGLE_CLIENT_ID=${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}" >> .env.prod
        echo "SOCIAL_AUTH_GOOGLE_SECRET=${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}" >> .env.prod
        echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env.prod
        echo "STATE=${{ secrets.STATE }}" >> .env.prod
        echo "SOCIAL_AUTH_NAVER_CLIENT_ID=${{ secrets.SOCIAL_AUTH_NAVER_CLIENT_ID }}" >> .env.prod
        echo "SOCIAL_AUTH_NAVER_SECRET=${{ secrets.SOCIAL_AUTH_NAVER_SECRET }}" >> .env.prod
        echo "NAVER_CALLBACK_URL=${{ secrets.NAVER_CALLBACK_URL }}" >> .env.prod
        echo "SOCIAL_AUTH_KAKAO_CLIENT_ID=${{ secrets.SOCIAL_AUTH_KAKAO_CLIENT_ID }}" >> .env.prod
        echo "SOCIAL_AUTH_KAKAO_SECRET=${{ secrets.SOCIAL_AUTH_KAKAO_SECRET }}" >> .env.prod
        echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env.prod
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env.prod
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env.prod
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.prod
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.prod
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env.prod
        echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env.prod
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME}}" >> .env.prod
        echo "DOCKERHUB_ACCESS_TOKEN=${{ secrets.DOCKERHUB_ACCESS_TOKEN}}" >> .env.prod
    - name: Run tests
      run: |
        python manage.py test --settings=golbang.settings
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: jungbeom
    needs: build  # build job이 성공적으로 완료된 후에 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 43.200.41.240
          username: ubuntu
          key: ${{ secrets.REMOTE_IP }}
          port: 22
          script: |
            whoami
            mkdir -p /home/ubuntu/srv/ubuntu
      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@master
        with:
          switches: -avzr --delete
          remote_path: /home/ubuntu/srv/ubuntu/
          remote_host: ${{ secrets.REMOTE_IP }}
          remote_user: ubuntu
          remote_key: ${{ secrets.REMOTE_SSH_KEY }}

      - name: executing remote ssh commands using SSH key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ubuntu
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            whoami
            sh /home/ubuntu/srv/ubuntu/config/scripts/deploy.sh
