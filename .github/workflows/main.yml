name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - release

jobs:
  build:
    if: github.repository == 'iNESlab/Golbang_BE'  # 특정 레포지토리에서만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # 설치 확인
      
      - name: Save JSON data from secret to file
        run:  echo '${{ secrets.FIREBASE_SDK_JSON }}' > ./django/serviceAccountKey.json

      - name: Create .env file from SERVER_ENV_FILE secret
        run: |
          # 브랜치별별 기본 .env 파일 생성
          BRANCH_NAME=${{ github.ref_name }}
          if [ "$BRANCH_NAME" == "main" ]; then
            echo "${{ secrets.SERVER_ENV_STAG_FILE }}" | sed 's/\r$//' > .env
          elif [ "$BRANCH_NAME" == "release" ]; then
            echo "${{ secrets.SERVER_ENV_PROD_FILE }}" | sed 's/\r$//' > .env
          else
            echo "Unknown branch: $BRANCH_NAME"
            exit 1
          fi
          
          # SECRET_KEY 추가
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "VERSION=${{ github.sha }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env
          

      - name: Upload Docker Compose and list of variables as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: |
            ${{ github.workspace }}/docker-compose.prod.yml

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.ci.yml build
          docker-compose -f docker-compose.ci.yml push
  deploy-dev:
    if: github.ref == 'refs/heads/main'  # main 브랜치에서만 실행  
    runs-on: dev
    needs: build
    steps:

      - name: Stop and remove existing containers (if docker-compose.prod.yml exists)
        run: |
          if [ -f docker-compose.prod.yml ] && [ -f .env ]; then
            sudo docker-compose --env-file .env -f docker-compose.prod.yml down
          else
            echo "docker-compose.prod.yml or .env not found. Skipping container shutdown."
          fi

      - name: Remove existing images
        run: |
          sudo docker image prune -af  # 모든 사용하지 않는 이미지를 강제 삭제

      - name: Remove existing .env and docker-compose files
        run: |
          rm -f .env docker-compose.prod.yml  # 기존 파일 삭제

      - name: Create .env file from SERVER_ENV_FILE secret
        run: |
          echo "${{ secrets.SERVER_ENV_STAG_FILE }}" | sed 's/\r$//' > ${{ github.workspace }}/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ${{ github.workspace }}/.env
          echo "VERSION=${{ github.sha }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD}}" >> .env

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-files

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Pull and run Docker container
        run: |
          sudo docker-compose --env-file .env -f docker-compose.prod.yml pull
          sudo docker-compose --env-file .env -f docker-compose.prod.yml up -d

  deploy-release:
    # TODO: deploy-dev와 거의 대부분 비슷한 코드. 코드 최적화 필요

    if: github.ref == 'refs/heads/release'  # release 브랜치에서만 실행  
    runs-on: release
    needs: build
    steps:
      - name: Deploy for release branch
        run: echo "Deploying on release branch runner"

      - name: Stop and remove existing containers (if docker-compose.prod.yml exists)
        run: |
          if [ -f docker-compose.prod.yml ] && [ -f .env ]; then
            sudo docker-compose --env-file .env -f docker-compose.prod.yml down
          else
            echo "docker-compose.prod.yml or .env not found. Skipping container shutdown."
          fi

      - name: Remove existing images
        run: |
          sudo docker image prune -af  # 모든 사용하지 않는 이미지를 강제 삭제

      - name: Create .env file from SERVER_ENV_FILE secret
        run: |
          echo "${{ secrets.SERVER_ENV_PROD_FILE }}" | sed 's/\r$//' > ${{ github.workspace }}/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ${{ github.workspace }}/.env
          echo "VERSION=${{ github.sha }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD}}" >> .env

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-files

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Pull and run Docker container
        run: |
          sudo docker-compose --env-file .env -f docker-compose.prod.yml pull
          sudo docker-compose --env-file .env -f docker-compose.prod.yml up -d
